// GO/NOGO training protocol, where random GO/NOGO and neutral cues 
// are delivered when a lever switch is pressed (it must be held for 300-800 ms to make a "true press")
// Sebastian Barrientos, PhD in Neuroscience

#include <toneAC.h>
#include <Button.h>

Button palanca = Button (8, BUTTON_PULLUP_INTERNAL, true, 50);
int LED = 11;
int SPEAKER = 12;
int emisor = 4;
int sensor = 2;
int valve = 5;
int castigo = 7;
int leds = 6;
int sync = A4;

unsigned long cue_time;
unsigned long press_time;
unsigned long currentMicros;
unsigned long np_time;
unsigned long release_time;
unsigned long variable_delay;
unsigned long end_time;
int ITI = 500; // minimum intertrial interval (500ms)

boolean listening = true;       // to know whether arduino is "listening" the lever
boolean available_trial = true; // to know whether a new trial can be initiated
boolean go_bool = false;        // to identify the current trial as GO
boolean nogo_bool = false;      // to identify the current trial as NOGO
boolean catch_trial = false;    // to identify the current trial as CATCH (empty cue)
boolean neutral_trial = false;  // to identify the current trial as Neutral (not associated with reward or punishment)
boolean neutral_bool = false;
boolean true_press = false;     // to check if the lever was properly pressed
boolean nosepoke = false;       // to check if a nosepoke was already done

int sensor_state;               // 
int palanca_state;
int previous_state;

int queue_type[100];            // enqueued order
unsigned long queue_time[100];  // time for order queue


void cue()                      // function that delivers GO and NOGO cues
{
  int cues = random (1, 5); 
  digitalWrite(sync, HIGH);          // TTL pulse to synchronize with an amplifier
  delay(5);
  digitalWrite(sync, LOW);
  available_trial = false;          
  cue_time = currentMicros / 1000;   // time stamp of cue delivery
  
  if (cues == 2 || cues == 4) // BIMODAL GO CUE
  {
    Serial.println("***GO CUE");
    go_bool = true;
    analogWrite(LED, 100);
    digitalWrite (leds, HIGH);
    for ( int volume = 0 ; volume <= 10; volume++) //ramp of volume
    {
      toneAC(1000, volume);
    }
    listening = false;                            // arduino doesn't read lever presses in the middle of the trial
    enqueue(1, currentMicros + (500000));         // enqueue order 1 (to turn off stimuli after 500 ms from the beginning)

  }

  if (cues == 1 || cues == 3) // BIMODAL NOGO CUE
  {
    Serial.println("***NOGO CUE");
    go_bool = false;
    nogo_bool = true;
    digitalWrite(leds, HIGH);
    for ( int volume = 0 ; volume <= 10; volume++) //ramp of volume
    {
      toneAC(5500, volume);
    }
    listening = false;
    enqueue(1, currentMicros + (500000));        

  }

}

void non_cue()                     // function that commands non cues (catch_trial trials and neutral_trial stimuli)
{
  int poll = random (2, 4);
  digitalWrite(sync, HIGH);         // TTL pulse to synchronize with neural recording
  delay(5);
  digitalWrite(sync, LOW);
  available_trial = false;
  neutral_bool = true;
  cue_time = currentMicros / 1000;
  if (poll == 3)
  {
    Serial.println("***CATCH");
    Serial.println("___________________");
    Serial.println("___________________");
    //listening = true;
    catch_trial = true;
    enqueue(1, currentMicros + (500000));

  }

  if (poll == 2)
  {
    Serial.println("***NEUTRAL");
    digitalWrite(LED, HIGH);
    for ( int volume = 0 ; volume <= 10; volume++) //ramp of both volume and frequency
    {
      for (int freq = 300 ; freq <= 8000; freq = freq + 50)
      {
        toneAC(freq, volume);
      }
    }
    //listening = true;
    neutral_trial = true;
    enqueue(1, currentMicros + (500000));
  }
}


void onPress(Button& b) {
  
  if (listening == true   && available_trial == true) // if Arduino is "listening"(reading) the lever, and a new trial can be initiated...
  {
    press_time = currentMicros / 1000;      //time stamp of the lever press
    if (press_time - end_time >= ITI)
    {
    variable_delay = random (300000, 800001); 
    available_trial = false;
    enqueue(6, currentMicros + (variable_delay));  // Lever must be pressed for a random period of time between 300 and 800ms
    Serial.println("___________________");
    Serial.println("Press");
    Serial.println("ITI: ");
    Serial.println(press_time - end_time);         // Indicates the Inter-trial Interval
    Serial.println("                   ");
    Serial.println("ON HOLD: ");
    Serial.println(variable_delay / 1000);         // How long the lever must be held
    Serial.println("                   ");
    }

  }
}

void onRelease(Button& b)
{
  if (true_press == true)              //only if the lever was pressed properly, it stores the time when the lever was released
  {
    release_time = currentMicros / 1000;  // time stamp of lever release
    Serial.println("Total Press: ");
    Serial.println(release_time - press_time);  //total time from lever press until release
    Serial.println("Release Delay: ");
    Serial.println(release_time - press_time - (variable_delay / 1000));
    //Serial.println("                   ");
    Serial.println("___________________");
  }
  true_press = false;
}

void enqueue(int orden, unsigned long time)
{
  int i;
  //  Serial.print("Enqueue ");
  //  Serial.println(currentMicros);
  for (i = 0; i < 100; i++)
  {
    if (queue_type[i] == 0)
    {
      queue_type[i] = orden;
      queue_time[i] = time;
      i = 100;
    }
  }
}

void dequeue()
{
  int i;

  for (i = 0; i < 100; i++)
  {
    if (queue_type[i] == 5) // todo lo que tiene que ver con true cues
    {
      if (queue_time[i] < currentMicros || sensor_state == HIGH)
      {
        //        Serial.print("Dequeue ");
        //        Serial.println(currentMicros);
        //Serial.println("Sensor reading Complete");
        queue_type[i] = 0;
        if (go_bool)                                             // IF IT IS A GO TRIAL
        {
          if (sensor_state == HIGH)
          {
            Serial.println("Reaction time: ");
            np_time = currentMicros / 1000;
            Serial.println(np_time - cue_time);         //    reaction time = from cue delivery to nosepoke
            Serial.println("                   ");
            digitalWrite(valve, LOW);
            Serial.println("11");                       // this is just a code to name the response made
            Serial.println("___________________");
            Serial.println("___________________");
            enqueue(4, currentMicros + 1000000);        // to turn off the valve after 1000 ms after activation
            available_trial = true;
            nosepoke = true;
            go_bool = false;
            previous_state = sensor_state;

          }
          else
          {
            Serial.println("Reaction time: ");
            Serial.println((currentMicros / 1000) - cue_time);
            Serial.println("                   ");
            Serial.println("13");
            Serial.println("___________________");
            Serial.println("___________________");
            available_trial = true;
            go_bool = false;
            previous_state = sensor_state;
            end_time = currentMicros / 1000;
            

          }
        } // end of GO

        else if (go_bool == false && nogo_bool == true)            // IF IT IS A NOGO TRIAL 
        {
          if (sensor_state == HIGH)
          {
            Serial.println("Reaction time: ");
            np_time = currentMicros / 1000;
            Serial.println(np_time - cue_time);
            Serial.println("                   ");
            Serial.println("22");
            Serial.println("___________________");
            Serial.println("___________________");
            digitalWrite(castigo, HIGH);
            //tone(SPEAKER,7000);//DEBUG
            listening = false;
            nosepoke = true;
            nogo_bool = false;
            enqueue(2, currentMicros + 6000000);
            previous_state = sensor_state;
          }

          else
          {
            Serial.println("Reaction time: ");
            Serial.println((currentMicros / 1000) - cue_time);
            Serial.println("                   ");
            Serial.println("23");
            Serial.println("___________________");
            Serial.println("___________________");
            available_trial = true;
            nogo_bool = false;
            previous_state = sensor_state;
            end_time = currentMicros / 1000;
          }

        } // end of NOGO
        
        else if (go_bool == false && neutral_bool == true)        //If IT IS A NEUTRAL TRIAL
        {
          
        if (sensor_state == HIGH)
        {
          Serial.println("Reaction time: ");
          np_time = currentMicros / 1000;
          Serial.println(np_time - cue_time);
          Serial.println("                   ");
          if (catch_trial == true)
            Serial.println("31");
          else if (neutral_trial == true)
            Serial.println("41");
          Serial.println("___________________");
          Serial.println("___________________");
          previous_state = sensor_state;
          available_trial = true;
          nosepoke = true;
          catch_trial = false;
          neutral_trial = false;
          neutral_bool = false;
          end_time = currentMicros / 1000;
        }
        else
        {
          Serial.println("Reaction time: ");
          Serial.println((currentMicros / 1000) - cue_time);
          Serial.println("                   ");
          if (catch_trial == true)
            Serial.println("30");
          else if (neutral_trial == true)
            Serial.println("40");
          Serial.println("___________________");
          Serial.println("___________________");
          previous_state = sensor_state;
          available_trial = true;
          catch_trial = false;
          neutral_trial = false;
          neutral_bool = false;
          end_time = currentMicros / 1000;
        }
          
          
        }
        
        
      } // end of sensor reading

    }// end of responses under cues or non_cues

    if (queue_type[i] != 0 && queue_time[i] < currentMicros)
    {
      //        Serial.print("Dequeue ");
      //        Serial.println(currentMicros);
      if (queue_type[i] == 1)                 // TURN OFF CUES
      {

        analogWrite(LED, LOW);
        digitalWrite(leds, LOW);
        //        noTone(SPEAKER);
        toneAC();
        listening = true;
      }
      else if (queue_type[i] == 2)             // TURN OFF PUNISHMENT
      {
        //        Serial.println("Castigo over");
        //        Serial.println(currentMicros/1000);
        digitalWrite(castigo, LOW);
        listening = true;
        available_trial = true;
        //noTone(SPEAKER);// DEBUG
      }
      
      else if (queue_type[i] == 4)             // TURN OFF VALVE
      {
        //Serial.println("REWARD");
        digitalWrite(valve, HIGH);

      }
      else if (queue_type[i] == 6)            // LEVER FUNCTION
      {
        if (palanca_state == LOW)
        {
          //Serial.println("TRUE PRESS");
          true_press = true;
          int cue_type = random (1, 7);

          if (cue_type == 1 || cue_type == 2 || cue_type == 3|| cue_type == 4|| cue_type == 5)
          {
            cue();
            enqueue(5, currentMicros + 2000000);
          }

          if (cue_type == 6)
          {
            non_cue();
            enqueue(5, currentMicros + 2000000);
          }
        }

        else
        {
          Serial.println("FALSE PRESS");
          Serial.println("___________________");
          Serial.println("___________________");
          available_trial = true;
          end_time = currentMicros / 1000;
        }
      }// end of lever press function
     
      queue_type[i] = 0;
    }

  }
}


void setup()
{
  int i;
  for (i = 0; i < 100; i++) {
    queue_type[i] = 0;
    queue_time[i] = 0;
  }

  Serial.begin(9600);
  Serial.println("GO/NO-GO training");
  pinMode(LED, OUTPUT); //debug to led 13
  pinMode(SPEAKER, OUTPUT);
  pinMode(valve, OUTPUT);
  digitalWrite(valve, HIGH);
  pinMode(sensor, INPUT);
  pinMode(emisor, OUTPUT);
  pinMode(castigo, OUTPUT);
  digitalWrite(emisor, HIGH);  // IR emitter is always HIGH
  pinMode(leds, OUTPUT);

  // Assign callback functions
  palanca.pressHandler(onPress);
  palanca.releaseHandler(onRelease);
}

void loop()
{

  currentMicros = micros();
  sensor_state = digitalRead(sensor);
  palanca_state = digitalRead(8);
  dequeue();
  palanca.process();
  if (nosepoke == true && previous_state == HIGH) // if a nosepoke was made...
  {
    if (sensor_state != previous_state)
    {
      Serial.println("Time in Nosepoke:");
      Serial.println((currentMicros / 1000) - np_time);
      Serial.println("_________________");
    }
    previous_state = sensor_state;
    nosepoke == false;
    end_time = currentMicros / 1000;
  }
}
